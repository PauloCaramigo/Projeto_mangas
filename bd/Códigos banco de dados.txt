CREATE DATABASE bancodedados;

USE bancodedados;

CREATE TABLE usuarios(
	codigo int(5) AUTO_INCREMENT,
	realName varchar(30) NOT NULL,
    username varchar(30),
	email varchar(50) NOT NULL,
    accountPassword varchar(50) NOT NULL,
	PRIMARY KEY (codigo)
);

ALTER TABLE `bancodedados`.`usuarios` 
ADD UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
ADD UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE;
;

ALTER TABLE `bancodedados`.`usuarios` 
CHANGE COLUMN `accountPassword` `accountPassword` VARCHAR(100) NOT NULL ,
ADD UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC) VISIBLE;
;

ALTER TABLE `bancodedados`.`usuarios` 
CHANGE COLUMN `realName` `realName` VARCHAR(50) NOT NULL ,
CHANGE COLUMN `username` `username` VARCHAR(50) NULL DEFAULT NULL ;


# Cria a coluna que irá armazenar o token de acesso do usuário, com ele podendo ser nulo mas não podendo se repetir.

ALTER TABLE `bancodedados`.`usuarios` 
ADD COLUMN `accessToken` VARCHAR(100) NULL AFTER `accountPassword`,
ADD UNIQUE INDEX `accessToken_UNIQUE` (`accessToken` ASC) VISIBLE;
;


# Altera o tamanho da coluna de email e accessToken para poder comportar os valores de forma correta

ALTER TABLE `bancodedados`.`usuarios` 
CHANGE COLUMN `email` `email` VARCHAR(255) NOT NULL ,
CHANGE COLUMN `accessToken` `accessToken` VARCHAR(300) NULL DEFAULT NULL ;


# Adiciona a coluna de imagem de perfil

ALTER TABLE `bancodedados`.`usuarios` 
ADD COLUMN `imgProfile` VARCHAR(100) NULL AFTER `accessToken`;


# Cria a tabela que armazena os mangas

CREATE TABLE mangas (
	mangaName VARCHAR(100) NOT NULL,
    resumeManga VARCHAR(300) NOT NULL,
	mangaImage VARCHAR(100) NOT NULL,
    genre VARCHAR(200) NOT NULL,
    UNIQUE(mangaName, mangaImage)
);


# Cria a coluna de capitulo mais recente para a tabela de mangas

ALTER TABLE mangas ADD COLUMN dateLatestChapter DATETIME NOT NULL;


# Altera o tamanho da coluna de resumo dos mangas

ALTER TABLE `bancodedados`.`mangas` 
CHANGE COLUMN `resumeManga` `resumeManga` VARCHAR(500) NOT NULL ;


# Adiciona a coluna de like e deslike dos mangas

ALTER TABLE `bancodedados`.`mangas` 
ADD COLUMN `like` INT NULL DEFAULT 0 AFTER `dateLatestChapter`,
ADD COLUMN `deslike` INT NULL DEFAULT 0 AFTER `like`;


# Modificando o nome das colunas de like e deslike para não dar problema no banco de dados

ALTER TABLE `bancodedados`.`mangas` 
CHANGE COLUMN `like` `likeColumn` INT NULL DEFAULT '0' ,
CHANGE COLUMN `deslike` `deslikeColumn` INT NULL DEFAULT '0' ;


# Adiciona o ID dos mangas e sua primary key

ALTER TABLE `bancodedados`.`mangas` 
ADD COLUMN `idManga` INT NOT NULL AUTO_INCREMENT FIRST,
ADD UNIQUE INDEX `idManga_UNIQUE` (`idManga` ASC) VISIBLE,
ADD PRIMARY KEY (`idManga`);
;


# Cria tabela de like dos mangas

CREATE TABLE likeMangas (
	likeId INT NOT NULL AUTO_INCREMENT,
    dateLike DATETIME,
    PRIMARY KEY (likeId),
)


# Adiciona o valor boolean para saber se será um like ou deslike

ALTER TABLE `bancodedados`.`likemangas` 
ADD COLUMN `like` BOOLEAN AFTER `dateLike`;


# Altera o nome do like no banco de dados para evitar problemas

ALTER TABLE `bancodedados`.`likemangas` 
CHANGE COLUMN `like` `likeType` TINYINT(1) NULL DEFAULT NULL ;


# Adiciona novamente os UNIQUE para que não haja duplicidade no tabela

ALTER TABLE `bancodedados`.`likemangas` 
  ADD COLUMN `idManga` INT NOT NULL AFTER `likeType`,
  ADD COLUMN `codigo` INT NOT NULL AFTER `idManga`,
  ADD UNIQUE INDEX `unique_like` (`idManga`, `codigo`);

ALTER TABLE `bancodedados`.`likemangas` 
  ADD CONSTRAINT `fk_likeManga_idManga`
    FOREIGN KEY (`idManga`)
    REFERENCES `bancodedados`.`mangas` (`idManga`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_likeManga_codigo`
    FOREIGN KEY (`codigo`)
    REFERENCES `bancodedados`.`usuarios` (`codigo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE;


# Remove as colunas de like de deslike da tabela de mangas

ALTER TABLE `bancodedados`.`mangas` 
DROP COLUMN `deslikeColumn`,
DROP COLUMN `likeColumn`;
